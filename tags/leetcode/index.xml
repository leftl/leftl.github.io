<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>leetcode on [tyler@twtrs.com] ~ $</title>
    <link>https://twtrs.com/tags/leetcode/</link>
    <description>Recent content in leetcode on [tyler@twtrs.com] ~ $</description>
    <image>
      <url>https://twtrs.com/papermod-cover.png</url>
      <link>https://twtrs.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 22 Nov 2021 19:24:35 -0800</lastBuildDate><atom:link href="https://twtrs.com/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode: Number of Islands</title>
      <link>https://twtrs.com/2021/11/leetcode-number-of-islands/</link>
      <pubDate>Mon, 22 Nov 2021 19:24:35 -0800</pubDate>
      
      <guid>https://twtrs.com/2021/11/leetcode-number-of-islands/</guid>
      <description>LeetCode: Number of Islands For the second entry in the LeetCode series, I will be discussing another medium-difficulty problem. However, unlike the in-depth analysis covered in the last LeetCode problem, this post will be a succinct overview of an efficient solution. This problem is great because it&amp;rsquo;s easily to visualize the input, and it does not have a lot of constraints. It also never hurts to have more practice with multidimensional arrays + graph searching algorithms.</description>
    </item>
    
    <item>
      <title>Leetcode: Set Matrix Zeroes (Part 2)</title>
      <link>https://twtrs.com/2021/11/leetcode-set-matrix-zeroes-part-2/</link>
      <pubDate>Sun, 07 Nov 2021 12:33:43 -0800</pubDate>
      
      <guid>https://twtrs.com/2021/11/leetcode-set-matrix-zeroes-part-2/</guid>
      <description>Continuing where we left off last week, let&amp;rsquo;s finally dicuss the optimal solution to the Set Matrix Zeroes problem from LeetCode. If you have not read Part 1, please do so! In the previous post, we discussed the problem &amp;amp; constraints, as well as some intuition behind the solution. Building off of this intuition, let&amp;rsquo;s go over the algorithm!
The Solution Recalling our constant-space requirement, and the conflicts that can come from writing zeroes before completing the first read, how can we safely indicate which rows and columns will be set to zero without compromising correctness?</description>
    </item>
    
    <item>
      <title>Leetcode: Set Matrix Zeroes (Part 1)</title>
      <link>https://twtrs.com/2021/11/leetcode-set-matrix-zeroes-part-1/</link>
      <pubDate>Thu, 04 Nov 2021 18:47:23 -0700</pubDate>
      
      <guid>https://twtrs.com/2021/11/leetcode-set-matrix-zeroes-part-1/</guid>
      <description>This problem, of medium difficulty, sounds trivial at first glance. However, given the constraints, it&amp;rsquo;s not as straightforward as it initially appears.
The Problem The problems is set-up as seen here: Set Matrix Zeroes - LeetCode
 Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0&amp;rsquo;s, and return the matrix.
You must do it in place.
Constraints:
 m == matrix.</description>
    </item>
    
  </channel>
</rss>
